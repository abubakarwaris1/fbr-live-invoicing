  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.STATIC_IP }} >> ~/.ssh/known_hosts

    - name: Test SSH connection
      run: ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ secrets.STATIC_IP }} "echo 'SSH OK'"

    # ✅ Stream the tarball directly over SSH (no /tmp on either side)
    - name: Upload & extract release on server
      run: |
        tar -czf - \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.env' \
          --exclude='terraform/.terraform' \
          --exclude='terraform/terraform.tfstate*' \
          . \
        | ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ secrets.STATIC_IP }} \
          "mkdir -p /opt/fbr-live-invoicing && tar -xzf - -C /opt/fbr-live-invoicing"

    - name: Deploy on server (build & start)
      run: |
        ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ secrets.STATIC_IP }} << 'REMOTE_SCRIPT'
          set -Eeuo pipefail
          echo "🚀 Deploying…"
          cd /opt/fbr-live-invoicing

          # Ensure docker compose v2 is available
          if command -v docker-compose >/dev/null 2>&1; then
            alias dcompose='docker-compose'
          else
            alias dcompose='docker compose'
          fi

          echo "📝 Writing .env"
          cat > .env << 'EOL'
          NODE_ENV=production
          PORT=3001
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          FBR_ACCESS_TOKEN=${{ secrets.FBR_ACCESS_TOKEN }}
          STATIC_IP=${{ secrets.STATIC_IP }}
          EOL

          echo "🛑 Stopping old stack (ignore errors if not running)…"
          dcompose down || true
          docker stop fbr-live-invoicing || true
          docker rm -f fbr-live-invoicing || true

          echo "🧹 Pruning old images (optional)…"
          docker image prune -f || true

          echo "🔨 Building & starting"
          dcompose up -d --build

          echo "⏳ Waiting for app"
          sleep 10

          echo "🔍 Health checks"
          # If Nginx is inside container exposing 3000, /health should exist in your Nginx config
          for i in {1..10}; do
            if curl -fsS http://localhost:3000/health; then
              echo "✅ Nginx health OK"
              break
            else
              echo "…retry $i"; sleep 3
            fi
          done

          for i in {1..10}; do
            if curl -fsS http://localhost:3000/api/health; then
              echo "✅ API health OK"
              break
            else
              echo "…retry $i"; sleep 3
            fi
          done

          echo "📊 Compose status"
          dcompose ps

          echo "📋 Recent logs"
          dcompose logs --tail=50
        REMOTE_SCRIPT
