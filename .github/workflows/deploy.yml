name: Deploy Application

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests (if any)
      run: npm test --if-present

    - name: Build client
      run: npm run build:client

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy application to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_IP }}
        username: root
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          set -e  # Exit on any error
          
          echo "üöÄ Starting deployment..."
          
          # Create application directory
          mkdir -p /opt/fbr-live-invoicing
          cd /opt/fbr-live-invoicing
          
          # Login to GitHub Container Registry
          echo "üîê Logging into GitHub Container Registry..."
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Stop and remove existing containers
          echo "üõë Stopping existing container..."
          docker stop fbr-live-invoicing || true
          docker rm fbr-live-invoicing || true
          
          # Pull the latest image
          echo "üì• Pulling latest image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Run the application with environment variables
          echo "üèÉ Starting new container..."
          docker run -d \
            --name fbr-live-invoicing \
            --restart unless-stopped \
            -p 3000:3000 \
            -e NODE_ENV=production \
            -e PORT=3000 \
            -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e FBR_ACCESS_TOKEN="${{ secrets.FBR_ACCESS_TOKEN }}" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Wait for application to start
          echo "‚è≥ Waiting for application to start..."
          sleep 15
          
          # Test health endpoint
          echo "üîç Testing health endpoint..."
          for i in {1..5}; do
            if curl -f http://localhost:3000/api/health; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚ùå Health check failed, attempt $i/5"
              sleep 5
            fi
          done
          
          # Clean up old images
          echo "üßπ Cleaning up old images..."
          docker system prune -f
          
          echo "üéâ Deployment completed successfully!"

    - name: Comment deployment info
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ **Application Deployment Successful!**
            
            **Server IP:** ${{ secrets.SERVER_IP }}
            **API Base URL:** http://${{ secrets.SERVER_IP }}/api
            **Health Check:** http://${{ secrets.SERVER_IP }}/api/health`
          })

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Application deployment successful!"
        else
          echo "‚ùå Application deployment failed!"
        fi
