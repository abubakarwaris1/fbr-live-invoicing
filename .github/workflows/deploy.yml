name: Deploy Application

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests (if any)
      run: npm test --if-present

    - name: Build client
      run: npm run build:client

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.SERVER_IP }}
        username: root
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: "."
        target: "/tmp/fbr-live-invoicing"
        strip_components: 1

    - name: Deploy application to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_IP }}
        username: root
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          set -e  # Exit on any error
          
          echo "🚀 Starting deployment with nginx inside container..."
          
          # Create application directory
          mkdir -p /opt/fbr-live-invoicing
          cd /opt/fbr-live-invoicing
          
          # Stop and remove existing containers
          echo "🛑 Stopping and removing existing containers..."
          docker-compose down || true
          docker stop fbr-live-invoicing || true
          docker rm -f fbr-live-invoicing || true
          
          # Remove old images to save space
          echo "🧹 Cleaning up old images..."
          docker rmi fbr-live-invoicing:latest || true
          docker system prune -f || true
          
          # Copy application files
          echo "📁 Copying application files..."
          rm -rf /opt/fbr-live-invoicing/*
          cp -r /tmp/fbr-live-invoicing/* /opt/fbr-live-invoicing/
          
          # Create .env file with secrets
          echo "📝 Creating environment file..."
          cat > /opt/fbr-live-invoicing/.env << EOL
          NODE_ENV=production
          PORT=3001
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          FBR_ACCESS_TOKEN=${{ secrets.FBR_ACCESS_TOKEN }}
          STATIC_IP=${{ secrets.STATIC_IP }}
          EOL
          
          # Build and start the container with nginx inside
          echo "🔨 Building and starting container with nginx..."
          cd /opt/fbr-live-invoicing
          docker-compose up -d --build
          
          # Wait for application to start
          echo "⏳ Waiting for application to start..."
          sleep 30
          
          # Test health endpoint
          echo "🔍 Testing health endpoint..."
          for i in {1..10}; do
            if curl -f http://localhost:3000/health; then
              echo "✅ Nginx health check passed!"
              break
            else
              echo "❌ Nginx health check failed, attempt $i/10"
              sleep 5
            fi
          done
          
          # Test API endpoint
          echo "🔍 Testing API endpoint..."
          for i in {1..5}; do
            if curl -f http://localhost:3000/api/health; then
              echo "✅ API health check passed!"
              break
            else
              echo "❌ API health check failed, attempt $i/5"
              sleep 5
            fi
          done
          
          # Show container status
          echo "📊 Container status:"
          docker-compose ps
          
          # Show logs
          echo "📋 Recent logs:"
          docker-compose logs --tail=20
          
          echo "🎉 Deployment completed successfully!"

    - name: Comment deployment info
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Application Deployment Successful!**
            
            **Server IP:** ${{ secrets.SERVER_IP }}
            **Static IP:** ${{ secrets.STATIC_IP }}
            **Web Interface:** http://${{ secrets.STATIC_IP }}:3000
            **API Base URL:** http://${{ secrets.STATIC_IP }}:3000/api
            **Health Check:** http://${{ secrets.STATIC_IP }}:3000/health
            **API Health:** http://${{ secrets.STATIC_IP }}:3000/api/health
            
            **Architecture:** Nginx inside container on port 3000, Express.js backend on port 3001`
          })

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Application deployment successful!"
          echo "🌐 Web Interface: http://${{ secrets.STATIC_IP }}:3000"
          echo "🔗 API Base URL: http://${{ secrets.STATIC_IP }}:3000/api"
        else
          echo "❌ Application deployment failed!"
        fi
