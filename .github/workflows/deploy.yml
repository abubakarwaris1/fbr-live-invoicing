name: Deploy Application

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests (if any)
        run: npm test --if-present

      - name: Build client
        run: npm run build:client

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug environment variables
        run: |
          echo "üîç Debugging ALL environment variables..."
          echo "=========================================="
          echo "STATIC_IP: '${{ env.STATIC_IP }}'"
          echo "SERVER_SSH_KEY present: $([ -n "${{ env.SERVER_SSH_KEY }}" ] && echo "YES" || echo "NO")"
          echo "MONGODB_URI present: $([ -n "${{ env.MONGODB_URI }}" ] && echo "YES" || echo "NO")"
          echo "JWT_SECRET present: $([ -n "${{ env.JWT_SECRET }}" ] && echo "YES" || echo "NO")"
          echo "FBR_ACCESS_TOKEN present: $([ -n "${{ env.FBR_ACCESS_TOKEN }}" ] && echo "YES" || echo "NO")"
          echo "DIGITALOCEAN_TOKEN present: $([ -n "${{ env.DIGITALOCEAN_TOKEN }}" ] && echo "YES" || echo "NO")"
          echo "=========================================="
          
          # Check if we're in the right environment
          echo "Current environment: ${{ github.environment }}"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"

      - name: Deploy application to server
        run: |
          # Validate required environment variables
          if [ -z "${{ env.STATIC_IP }}" ]; then
            echo "‚ùå STATIC_IP environment variable is empty!"
            echo "üí° Please check your GitHub Environment 'production' and ensure STATIC_IP is set to: 144.126.251.143"
            exit 1
          fi
          
          if [ -z "${{ env.SERVER_SSH_KEY }}" ]; then
            echo "‚ùå SERVER_SSH_KEY environment variable is empty!"
            echo "üí° Please check your GitHub Environment 'production' and ensure SERVER_SSH_KEY is set"
            exit 1
          fi
          
          echo "‚úÖ All required environment variables are present"
          echo "üéØ Using STATIC_IP: ${{ env.STATIC_IP }}"
          
          # Create tmp directory if it doesn't exist
          mkdir -p /tmp
          
          # Create tar file
          tar -czf /tmp/fbr-live-invoicing.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            --exclude='terraform/.terraform' \
            --exclude='terraform/terraform.tfstate*' \
            .
          
          # Write SSH key to temporary file
          echo "${{ env.SERVER_SSH_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          
          # Test SSH connection first
          echo "üîç Testing SSH connection to ${{ env.STATIC_IP }}..."
          ssh -i /tmp/ssh_key \
            -o ConnectTimeout=10 \
            -o StrictHostKeyChecking=no \
            -o BatchMode=yes \
            root@${{ env.STATIC_IP }} "echo 'SSH connection successful'"
          
          # Copy to server using SSH key
          echo "üìÅ Copying files to server..."
          scp -i /tmp/ssh_key \
            -o ConnectTimeout=30 \
            -o StrictHostKeyChecking=no \
            /tmp/fbr-live-invoicing.tar.gz \
            root@${{ env.STATIC_IP }}:/tmp/
          
          # Deploy on server using SSH key
          echo "üöÄ Deploying application..."
          ssh -i /tmp/ssh_key \
            -o ConnectTimeout=10 \
            -o StrictHostKeyChecking=no \
            root@${{ env.STATIC_IP }} << 'REMOTE_SCRIPT'
            set -e
            echo "üöÄ Starting deployment with nginx inside container..."
            
            # Create application directory
            mkdir -p /opt/fbr-live-invoicing
            cd /opt/fbr-live-invoicing
            
            # Stop and remove existing containers
            echo "üõë Stopping and removing existing containers..."
            docker-compose down || true
            docker stop fbr-live-invoicing || true
            docker rm -f fbr-live-invoicing || true
            
            # Remove old images to save space
            echo "üßπ Cleaning up old images..."
            docker rmi fbr-live-invoicing:latest || true
            docker system prune -f || true
            
            # Extract application files
            echo "üìÅ Extracting application files..."
            rm -rf /opt/fbr-live-invoicing/*
            tar -xzf /tmp/fbr-live-invoicing.tar.gz -C /opt/fbr-live-invoicing/
            rm -f /tmp/fbr-live-invoicing.tar.gz
            
            # Create .env file with environment variables
            echo "üìù Creating environment file..."
            echo "NODE_ENV=production" > /opt/fbr-live-invoicing/.env
            echo "PORT=3001" >> /opt/fbr-live-invoicing/.env
            echo "MONGODB_URI=${{ env.MONGODB_URI }}" >> /opt/fbr-live-invoicing/.env
            echo "JWT_SECRET=${{ env.JWT_SECRET }}" >> /opt/fbr-live-invoicing/.env
            echo "FBR_ACCESS_TOKEN=${{ env.FBR_ACCESS_TOKEN }}" >> /opt/fbr-live-invoicing/.env
            echo "STATIC_IP=${{ env.STATIC_IP }}" >> /opt/fbr-live-invoicing/.env
            
            # Ensure Docker is running
            echo "üê≥ Ensuring Docker is running..."
            systemctl start docker || true
            systemctl enable docker || true
            
            # Wait for Docker to be ready
            echo "‚è≥ Waiting for Docker to be ready..."
            for i in {1..10}; do
              if docker info > /dev/null 2>&1; then
                echo "‚úÖ Docker is ready"
                break
              else
                echo "‚è≥ Docker not ready, attempt $i/10"
                sleep 3
              fi
            done
            
            # Build and start the container with nginx inside
            echo "üî® Building and starting container with nginx inside..."
            cd /opt/fbr-live-invoicing
            docker-compose up -d --build
            
            # Wait for application to start with better detection
            echo "‚è≥ Waiting for application to start..."
            for i in {1..20}; do
              if docker-compose ps | grep -q "Up"; then
                echo "‚úÖ Container is up"
                break
              else
                echo "‚è≥ Container not up yet, attempt $i/20"
                sleep 3
              fi
            done
            
            # Additional wait for services to be ready
            sleep 10
            
            # Test health endpoint (nginx health check inside container)
            echo "üîç Testing nginx health endpoint inside container..."
            for i in {1..10}; do
              if curl -f http://localhost:3000/health; then
                echo "‚úÖ Nginx health check passed!"
                break
              else
                echo "‚ùå Nginx health check failed, attempt $i/10"
                sleep 5
              fi
            done
            
            # Test API endpoint through container nginx
            echo "üîç Testing API endpoint through container nginx..."
            for i in {1..10}; do
              if curl -f http://localhost:3000/api/health; then
                echo "‚úÖ API health check through container nginx passed!"
                break
              else
                echo "‚ùå API health check through container nginx failed, attempt $i/10"
                sleep 5
              fi
            done
            
            # Test frontend through container nginx
            echo "üîç Testing frontend through container nginx..."
            for i in {1..10}; do
              if curl -f http://localhost:3000/ | grep -q "html"; then
                echo "‚úÖ Frontend check through container nginx passed!"
                break
              else
                echo "‚ùå Frontend check through container nginx failed, attempt $i/10"
                sleep 5
              fi
            done
            
            # Show container status
            echo "üìä Container status:"
            docker-compose ps
            
            # Show logs
            echo "üìã Recent logs:"
            docker-compose logs --tail=20
            
            echo "üéâ Deployment completed successfully!"
          REMOTE_SCRIPT
          
          # Clean up SSH key
          rm -f /tmp/ssh_key

      - name: Comment deployment info
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Application Deployment Successful!**
              
              **Static IP:** ${{ env.STATIC_IP }}
              **Web Interface:** http://${{ env.STATIC_IP }}:3000/
              **API Base URL:** http://${{ env.STATIC_IP }}:3000/api
              **Health Check:** http://${{ env.STATIC_IP }}:3000/health
              **API Health:** http://${{ env.STATIC_IP }}:3000/api/health
              
              **Architecture:** Container nginx on port 3000 ‚Üí Express.js on port 3001`
            })

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Application deployment successful!"
            echo "üåê Web Interface: http://${{ env.STATIC_IP }}:3000/"
            echo "üîó API Base URL: http://${{ env.STATIC_IP }}:3000/api"
          else
            echo "‚ùå Application deployment failed!"
          fi
