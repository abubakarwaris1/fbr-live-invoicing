name: Deploy Application

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests (if any)
        run: npm test --if-present

      - name: Build client
        run: npm run build:client

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          # Create SSH directory with proper permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write SSH key to file
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add server to known_hosts
          ssh-keyscan -H ${{ secrets.STATIC_IP }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          # Test SSH connection
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ secrets.STATIC_IP }} "echo 'SSH connection successful'"

      - name: Deploy application to server
        run: |
          # Create tmp directory if it doesn't exist
          mkdir -p /tmp
          
          # Create tar file
          tar -czf /tmp/fbr-live-invoicing.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            --exclude='terraform/.terraform' \
            --exclude='terraform/terraform.tfstate*' \
            .
          
          # Copy to server
          scp -o ConnectTimeout=30 -o StrictHostKeyChecking=no \
            /tmp/fbr-live-invoicing.tar.gz \
            root@${{ secrets.STATIC_IP }}:/tmp/
          
          # Deploy on server
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ secrets.STATIC_IP }} << 'REMOTE_SCRIPT'
            set -e
            echo "🚀 Starting deployment with nginx proxy architecture..."
            
            # Create application directory
            mkdir -p /opt/fbr-live-invoicing
            cd /opt/fbr-live-invoicing
            
            # Stop and remove existing containers
            echo "🛑 Stopping and removing existing containers..."
            docker-compose down || true
            docker stop fbr-live-invoicing || true
            docker rm -f fbr-live-invoicing || true
            
            # Remove old images to save space
            echo "🧹 Cleaning up old images..."
            docker rmi fbr-live-invoicing:latest || true
            docker system prune -f || true
            
            # Extract application files
            echo "📁 Extracting application files..."
            rm -rf /opt/fbr-live-invoicing/*
            tar -xzf /tmp/fbr-live-invoicing.tar.gz -C /opt/fbr-live-invoicing/
            rm -f /tmp/fbr-live-invoicing.tar.gz
            
            # Create .env file with secrets
            echo "📝 Creating environment file..."
            cat > /opt/fbr-live-invoicing/.env << EOL
            NODE_ENV=production
            PORT=3001
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            FBR_ACCESS_TOKEN=${{ secrets.FBR_ACCESS_TOKEN }}
            STATIC_IP=${{ secrets.STATIC_IP }}
            EOL
            
            # Ensure Docker is running
            echo "🐳 Ensuring Docker is running..."
            systemctl start docker || true
            systemctl enable docker || true
            
            # Ensure nginx proxy is configured on host
            echo "🔧 Ensuring nginx proxy is configured..."
            if ! command -v nginx &> /dev/null; then
                echo "📦 Installing nginx..."
                apt-get update
                apt-get install -y nginx
            fi
            
            # Configure nginx proxy if not already configured
            if [ ! -f /etc/nginx/sites-available/fbr-live-invoicing ]; then
                echo "🔧 Configuring nginx proxy..."
                cat > /etc/nginx/sites-available/fbr-live-invoicing << 'NGINX_CONFIG'
            server {
                listen 80 default_server;
                listen [::]:80 default_server;
                
                server_name _;
                
                # Proxy all requests to container on port 3000
                location / {
                    proxy_pass http://127.0.0.1:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                    proxy_read_timeout 300;
                    proxy_connect_timeout 300;
                    proxy_send_timeout 300;
                }
            }
            NGINX_CONFIG
                
                # Enable the site and remove default
                ln -sf /etc/nginx/sites-available/fbr-live-invoicing /etc/nginx/sites-enabled/
                rm -f /etc/nginx/sites-enabled/default
                
                # Test nginx configuration
                nginx -t
                
                # Start and enable nginx
                systemctl start nginx
                systemctl enable nginx
                
                # Ensure firewall allows port 80
                ufw allow 80/tcp || true
            fi
            
            # Build and start the container with nginx inside
            echo "🔨 Building and starting container with nginx..."
            cd /opt/fbr-live-invoicing
            docker-compose up -d --build
            
            # Wait for application to start
            echo "⏳ Waiting for application to start..."
            sleep 30
            
            # Test health endpoint
            echo "🔍 Testing health endpoint..."
            for i in {1..10}; do
              if curl -f http://localhost:3000/health; then
                echo "✅ Container health check passed!"
                break
              else
                echo "❌ Container health check failed, attempt $i/10"
                sleep 5
              fi
            done
            
            # Test API endpoint through proxy
            echo "🔍 Testing API endpoint through proxy..."
            for i in {1..5}; do
              if curl -f http://localhost/api/health; then
                echo "✅ API health check through proxy passed!"
                break
              else
                echo "❌ API health check through proxy failed, attempt $i/5"
                sleep 5
              fi
            done
            
            # Test frontend through proxy
            echo "🔍 Testing frontend through proxy..."
            for i in {1..5}; do
              if curl -f http://localhost/ | grep -q "Material Tailwind Dashboard"; then
                echo "✅ Frontend check through proxy passed!"
                break
              else
                echo "❌ Frontend check through proxy failed, attempt $i/5"
                sleep 5
              fi
            done
            
            # Show container status
            echo "📊 Container status:"
            docker-compose ps
            
            # Show logs
            echo "📋 Recent logs:"
            docker-compose logs --tail=20
            
            echo "🎉 Deployment completed successfully!"
          REMOTE_SCRIPT

      - name: Comment deployment info
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Application Deployment Successful!**
              
              **Static IP:** ${{ secrets.STATIC_IP }}
              **Web Interface:** http://${{ secrets.STATIC_IP }}/
              **API Base URL:** http://${{ secrets.STATIC_IP }}/api
              **Health Check:** http://${{ secrets.STATIC_IP }}/health
              **API Health:** http://${{ secrets.STATIC_IP }}/api/health
              
              **Architecture:** Nginx proxy on port 80 → Container nginx on port 3000 → Express.js on port 3001`
            })

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Application deployment successful!"
            echo "🌐 Web Interface: http://${{ secrets.STATIC_IP }}/"
            echo "🔗 API Base URL: http://${{ secrets.STATIC_IP }}/api"
          else
            echo "❌ Application deployment failed!"
          fi
